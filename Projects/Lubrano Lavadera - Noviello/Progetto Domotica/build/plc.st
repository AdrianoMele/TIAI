TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    ADD10_OUT : UINT;
    EQ13_OUT : BOOL;
    SEL15_OUT : UINT;
    AND7_OUT : BOOL;
  END_VAR

  ADD10_OUT := ADD(COUNTER, 1);
  EQ13_OUT := EQ(N, ADD10_OUT);
  SEL15_OUT := SEL(EQ13_OUT, ADD10_OUT, 0);
  COUNTER := SEL15_OUT;
  AND7_OUT := AND(EQ13_OUT, TRIG);
  py_eval(TRIG := AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


FUNCTION_BLOCK TP_RESETOFF_TIMER
  VAR_INPUT
    IN : BOOL;
    PT : TIME;
    RESET : BOOL;
  END_VAR
  VAR_OUTPUT
    Q : BOOL;
    ET : TIME := T#0s;
  END_VAR
  VAR
    STATE : SINT := 0;
    PREV_IN : BOOL := FALSE;
    CURRENT_TIME : TIME;
    START_TIME : TIME;
  END_VAR

  (* Pragma to set current time *)
  {__SET_VAR(data__->,CURRENT_TIME,,__CURRENT_TIME)}

  (*Timer block code *)
  IF ((STATE = 0) AND NOT(PREV_IN) AND IN) THEN  (* found rising edge on IN *)
      (* start timer... *)
      STATE := 1;
      Q := TRUE;
      START_TIME := CURRENT_TIME;

  ELSIF (STATE = 1) THEN (* timer counting *)
      IF ((START_TIME + PT) <= CURRENT_TIME) THEN (* timer expired *)
          STATE := 2;
          Q := FALSE;
          ET := PT;
      ELSE (* continue counting *)
          ET := CURRENT_TIME - START_TIME;
      END_IF;
  END_IF;

  IF ((STATE = 2) AND NOT(IN)) THEN
      ET := T#0s;
      STATE := 0;
  END_IF;

  IF (RESET) THEN (* reset pressed *)
    ET := T#0s;
    STATE := 0;
    Q := FALSE;
  END_IF;

  PREV_IN := IN;
END_FUNCTION_BLOCK

PROGRAM cancello_esterno
  VAR_EXTERNAL
    BUTTON : BOOL;
  END_VAR
  VAR
    LIGHT : BOOL := 0;
    MOT_A : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    MOT_C : BOOL;
    ALARM1 : BOOL;
    ALARM2 : BOOL;
    ALARM3 : BOOL;
    ALARM4 : BOOL;
    FOTOC1 : BOOL;
    C_CHIUSO : BOOL;
    C_APERTO : BOOL;
  END_VAR
  VAR
    BUTTON1 : BOOL := 0;
    MOT_A1 : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    MOT_C1 : BOOL;
    FOTOC2 : BOOL;
    G_CHIUSO : BOOL;
  END_VAR
  VAR
    G_APERTO : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    S_MOV1 : BOOL;
  END_VAR
  VAR
    BUTTON2 : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    C_PEDONALE : BOOL;
  END_VAR

  INITIAL_STEP F0:
  END_STEP

  TRANSITION FROM F0 TO F1
    := BUTTON AND NOT(ALARM1);
  END_TRANSITION

  STEP F1:
    MOT_A(S);
    BUTTON(R);
    LIGHT(S);
  END_STEP

  TRANSITION FROM F1 TO F2
    := BUTTON OR C_APERTO;
  END_TRANSITION

  STEP F2:
    MOT_A(R);
    BUTTON(R);
    LIGHT(R);
  END_STEP

  TRANSITION FROM F2 TO F3
    := BUTTON OR F2.T>=T#5s;
  END_TRANSITION

  STEP F3:
    MOT_C(S);
    BUTTON(R);
    LIGHT(S);
  END_STEP

  TRANSITION FROM F3 TO F4
    := BUTTON OR FOTOC1;
  END_TRANSITION

  STEP F4:
    MOT_C(R);
    BUTTON(R);
    LIGHT(R);
  END_STEP

  TRANSITION FROM F4 TO F1
    := BUTTON OR F2.T>=T#5s;
  END_TRANSITION

  TRANSITION FROM F3 TO F5
    := C_CHIUSO;
  END_TRANSITION

  STEP F5:
    MOT_C(R);
    LIGHT(R);
  END_STEP

  TRANSITION FROM F5 TO F0
    := TRUE;
  END_TRANSITION

  INITIAL_STEP S0:
  END_STEP

  TRANSITION FROM S0 TO S0B
    := BUTTON AND NOT(ALARM1);
  END_TRANSITION

  STEP S0B:
    C_CHIUSO(R);
  END_STEP

  TRANSITION FROM S0B TO S1
    := F1.T>=T#20s AND F1.X;
  END_TRANSITION

  STEP S1:
    C_APERTO(S);
  END_STEP

  TRANSITION FROM S1 TO S2
    := F3.X;
  END_TRANSITION

  STEP S2:
    C_APERTO(R);
  END_STEP

  TRANSITION FROM S2 TO S4
    := F3.T>=T#20s;
  END_TRANSITION

  STEP S4:
    C_CHIUSO(S);
  END_STEP

  TRANSITION FROM S4 TO S0
    := TRUE;
  END_TRANSITION

  TRANSITION FROM S2 TO S5
    := F4.X;
  END_TRANSITION

  STEP S5:
  END_STEP

  TRANSITION FROM S5 TO S1
    := F1.T>=F3.T AND F1.X;
  END_TRANSITION

  TRANSITION FROM S0B TO S3
    := F2.X;
  END_TRANSITION

  STEP S3:
    C_APERTO(R);
  END_STEP

  TRANSITION FROM S3 TO S4
    := F1.T<=F3.T AND F3.X;
  END_TRANSITION

  INITIAL_STEP F6:
  END_STEP

  TRANSITION FROM F6 TO F7
    := BUTTON1 AND NOT(ALARM2);
  END_TRANSITION

  STEP F7:
    MOT_A1(S);
    BUTTON1(R);
  END_STEP

  TRANSITION FROM F7 TO F8
    := G_APERTO;
  END_TRANSITION

  STEP F8:
    MOT_A1(R);
  END_STEP

  TRANSITION FROM F8 TO F9
    := NOT(S_MOV1) AND F8.T>=T#15s OR BUTTON1;
  END_TRANSITION

  STEP F9:
    MOT_C1(S);
    BUTTON1(R);
  END_STEP

  TRANSITION FROM F9 TO F10
    := BUTTON1 OR FOTOC2;
  END_TRANSITION

  STEP F10:
    MOT_C1(R);
    BUTTON1(R);
  END_STEP

  TRANSITION FROM F10 TO F7
    := BUTTON1 OR F8.T>=T#5s;
  END_TRANSITION

  TRANSITION FROM F9 TO F11
    := G_CHIUSO;
  END_TRANSITION

  STEP F11:
    MOT_C1(R);
  END_STEP

  TRANSITION FROM F11 TO F6
    := TRUE;
  END_TRANSITION

  INITIAL_STEP S11:
  END_STEP

  TRANSITION FROM S11 TO S0B0
    := (BUTTON1 OR NOT(G_APERTO) AND C_APERTO) AND NOT(ALARM2);
  END_TRANSITION

  STEP S0B0:
    G_CHIUSO(R);
  END_STEP

  TRANSITION FROM S0B0 TO S6
    := F7.T>=T#15s AND F7.X;
  END_TRANSITION

  STEP S6:
    G_APERTO(S);
  END_STEP

  TRANSITION FROM S6 TO S7
    := F9.X;
  END_TRANSITION

  STEP S7:
    G_APERTO(R);
  END_STEP

  TRANSITION FROM S7 TO S9
    := F9.T>=T#15s;
  END_TRANSITION

  STEP S9:
    G_CHIUSO(S);
  END_STEP

  TRANSITION FROM S9 TO S11
    := TRUE;
  END_TRANSITION

  TRANSITION FROM S7 TO S10
    := F10.X;
  END_TRANSITION

  STEP S10:
  END_STEP

  TRANSITION FROM S10 TO S6
    := F7.T>=F9.T AND F7.X;
  END_TRANSITION

  TRANSITION FROM S0B0 TO S8
    := F8.X;
  END_TRANSITION

  STEP S8:
    G_APERTO(R);
  END_STEP

  TRANSITION FROM S8 TO S9
    := F7.T<=F9.T AND F9.X;
  END_TRANSITION

  INITIAL_STEP F12:
  END_STEP

  TRANSITION FROM F12 TO F13
    := BUTTON2 AND NOT(ALARM1);
  END_TRANSITION

  STEP F13:
    C_PEDONALE(SL, T#10s);
    BUTTON2(R);
  END_STEP

  TRANSITION FROM F13 TO F12
    := TRUE;
  END_TRANSITION

END_PROGRAM

FUNCTION_BLOCK TP_RESET_TIMER
  VAR_INPUT
    IN : BOOL;
    PT : TIME;
    RESET : BOOL;
  END_VAR
  VAR_OUTPUT
    Q : BOOL;
    ET : TIME := T#0s;
  END_VAR
  VAR
    STATE : SINT := 0;
    PREV_IN : BOOL := FALSE;
    CURRENT_TIME : TIME;
    START_TIME : TIME;
  END_VAR

  (* set del tempo corrente *)
  {__SET_VAR(data__->,CURRENT_TIME,,__CURRENT_TIME)}

  (*Codice timer*)
  IF ((STATE = 0) AND NOT(PREV_IN) AND IN) THEN  (* trova rising edge su IN *)
      (* start timer... *)
      STATE := 1;
      Q := TRUE;
      START_TIME := CURRENT_TIME;

  ELSIF (STATE = 1) THEN (* inizio conteggio timer *)
      IF ((START_TIME + PT) <= CURRENT_TIME) THEN (* timer esaurito *)
          STATE := 2;
          Q := FALSE;
          ET := PT;
      ELSE (* continuo conteggio *)
          ET := CURRENT_TIME - START_TIME;
      END_IF;
  END_IF;

  IF ((STATE = 2) AND NOT(IN)) THEN
      ET := T#0s;
      STATE := 0;
  END_IF;

  IF (RESET) THEN (* reset timer *)
    ET := T#0s;
    STATE := 1;
    Q := TRUE;
    START_TIME := CURRENT_TIME;
  END_IF;

  PREV_IN := IN;
END_FUNCTION_BLOCK

PROGRAM illuminazione
  VAR_EXTERNAL
    C_CHIUSO : BOOL;
    BUTTON : BOOL;
    C_PEDONALE : BOOL;
    G_CHIUSO : BOOL;
    LIGHT1 : BOOL;
    LIGHT2 : BOOL;
    LIGHT3 : BOOL;
    LIGHT4 : BOOL;
  END_VAR
  VAR
    S_CREPUSCOLARE : BOOL := 0;
    B_LIGHT1 : BOOL := 0;
    B_LIGHT2 : BOOL := 0;
    B_LIGHT3 : BOOL := 0;
    B_LIGHT4 : BOOL := 0;
    B_TIMER : BOOL := 0;
  END_VAR
  VAR
    TP0 : TP;
    TEMPO_ACCENSIONE : TOD := TOD#12:30:00;
    DATA_INIZIALE : DT := DT#2020-07-11-12:29:45;
    TEMPO_CORRENTE : TOD;
    RTC0 : RTC;
  END_VAR
  VAR_EXTERNAL
    S_MOV1 : BOOL;
  END_VAR
  VAR
    TP_WITH_RESET0 : TP_RESET_TIMER;
    TP_RESETOFF_TIMER0 : TP_RESETOFF_TIMER;
    TP_RESETOFF_TIMER1 : TP_RESETOFF_TIMER;
    TP1 : TP;
  END_VAR
  VAR
    GIORNODOPO : BOOL := 0;
  END_VAR
  VAR
    DATE_AND_TIME_TO_TIME_OF_DAY35_OUT : TOD;
    GT37_OUT : BOOL;
  END_VAR

  TP0(IN := S_CREPUSCOLARE AND NOT(C_CHIUSO), PT := T#25s);
  LIGHT1 := B_LIGHT1 OR TP0.Q;
  TP_WITH_RESET0(IN := S_CREPUSCOLARE AND NOT(G_CHIUSO), PT := T#30s, RESET := S_MOV1 AND S_CREPUSCOLARE);
  LIGHT2 := B_LIGHT2 OR TP_WITH_RESET0.Q;
  RTC0(IN := TRUE, PDT := DATA_INIZIALE);
  DATE_AND_TIME_TO_TIME_OF_DAY35_OUT := DATE_AND_TIME_TO_TIME_OF_DAY(RTC0.CDT);
  TEMPO_CORRENTE := DATE_AND_TIME_TO_TIME_OF_DAY35_OUT;
  GT37_OUT := GT(TEMPO_CORRENTE, TEMPO_ACCENSIONE);
  TP_RESETOFF_TIMER0(IN := NOT(GIORNODOPO) AND GT37_OUT, PT := T#20s, RESET := B_TIMER);
  TP1(IN := C_PEDONALE, PT := T#25s);
  LIGHT3 := S_CREPUSCOLARE AND (TP1.Q OR TP_RESETOFF_TIMER0.Q) OR B_LIGHT3;
  TP_RESETOFF_TIMER1(IN := NOT(GIORNODOPO) AND GT37_OUT, PT := T#20s, RESET := B_TIMER);
  LIGHT4 := S_CREPUSCOLARE AND TP_RESETOFF_TIMER1.Q OR B_LIGHT4;
END_PROGRAM

PROGRAM antifurto
  VAR
    ANTI_THEFT1 : BOOL := 0;
    ANTI_THEFT2 : BOOL := 0;
    ANTI_THEFT3 : BOOL := 0;
    ANTI_THEFT4 : BOOL := 0;
    T_PROX1 : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    FOTOC1 : BOOL;
    FOTOC2 : BOOL;
    S_MOV1 : BOOL;
  END_VAR
  VAR
    S_MOV2 : BOOL := 0;
    S_FUMO : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    ALARM1 : BOOL;
    ALARM2 : BOOL;
    ALARM3 : BOOL;
    ALARM4 : BOOL;
  END_VAR
  VAR
    L_PORTA : BOOL := 0;
    L_FINESTRE : BOOL := 0;
  END_VAR
  VAR_EXTERNAL
    C_CHIUSO : BOOL;
    G_CHIUSO : BOOL;
    C_PEDONALE : BOOL;
  END_VAR
  VAR
    FARO1 : BOOL := 0;
    FARO2 : BOOL := 0;
    FARO3 : BOOL := 0;
    FARO4 : BOOL := 0;
    LIGHT5 : BOOL := 0;
    SPEAKER1 : BOOL := 0;
    SPRINKLER : BOOL := 0;
  END_VAR
  VAR
    TON0 : TON;
    TOF0 : TOF;
    TON1 : TON;
    TOF1 : TOF;
    TON2 : TON;
    TOF2 : TOF;
    TON3 : TON;
    TOF3 : TOF;
    TON4 : TON;
    TOF4 : TOF;
  END_VAR

  SPRINKLER := NOT(ALARM4) AND S_FUMO;
  SPEAKER1 := TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2);
  TON4(IN := NOT(LIGHT5) AND NOT(ALARM4) AND S_FUMO, PT := T#1000ms);
  TOF4(IN := TON4.Q, PT := T#1000ms);
  LIGHT5 := TOF4.Q;
  L_PORTA := TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2);
  L_FINESTRE := TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2);
  ALARM1 := ANTI_THEFT1 OR ANTI_THEFT4;
  TON0(IN := NOT(FARO1) AND TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2), PT := T#1000ms);
  TOF0(IN := TON0.Q, PT := T#1000ms);
  FARO1 := TOF0.Q;
  ALARM2 := ANTI_THEFT2 OR ANTI_THEFT4;
  ALARM3 := ANTI_THEFT3 OR ANTI_THEFT4;
  TON1(IN := NOT(FARO2) AND TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2), PT := T#1000ms);
  TOF1(IN := TON1.Q, PT := T#1000ms);
  FARO2 := TOF1.Q;
  TON2(IN := NOT(FARO3) AND TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2), PT := T#1000ms);
  TOF2(IN := TON2.Q, PT := T#1000ms);
  FARO3 := TOF2.Q;
  TON3(IN := NOT(FARO4) AND TRUE AND (ALARM1 AND (FOTOC1 OR T_PROX1) OR ALARM2 AND (FOTOC2 OR S_MOV1) OR ALARM3 AND S_MOV2), PT := T#1000ms);
  TOF3(IN := TON3.Q, PT := T#1000ms);
  FARO4 := TOF3.Q;
END_PROGRAM


CONFIGURATION Config0
  VAR_GLOBAL
    BUTTON : BOOL := 0;
    ALARM1 : BOOL := 0;
    ALARM2 : BOOL := 0;
    ALARM3 : BOOL := 0;
    ALARM4 : BOOL := 0;
    FOTOC1 : BOOL := 0;
    FOTOC2 : BOOL := 0;
    S_MOV1 : BOOL := 0;
    MOT_C : BOOL := 0;
    MOT_C1 : BOOL := 0;
    C_APERTO : BOOL := 0;
    C_CHIUSO : BOOL := 1;
    C_PEDONALE : BOOL := 0;
    LIGHT1 : BOOL := 0;
    LIGHT2 : BOOL := 0;
    LIGHT3 : BOOL := 0;
    LIGHT4 : BOOL := 0;
    G_CHIUSO : BOOL := 1;
  END_VAR

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : cancello_esterno;
    PROGRAM instance1 WITH task0 : illuminazione;
    PROGRAM instance2 WITH task0 : antifurto;
  END_RESOURCE
END_CONFIGURATION
