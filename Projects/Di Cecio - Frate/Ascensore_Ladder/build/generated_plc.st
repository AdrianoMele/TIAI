TYPE
  USINT_QUEUE : STRUCT
    ARR : ARRAY [0..19] OF USINT;
    TOP : USINT;
    BOT : USINT;
    DIM : USINT;
  END_STRUCT;
END_TYPE

FUNCTION_BLOCK OUT_USINT_QUEUE
  VAR_EXTERNAL
    QUEUE : USINT_QUEUE;
  END_VAR
  VAR_INPUT
    IN : BOOL;
  END_VAR
  VAR_OUTPUT
    DATA : USINT;
  END_VAR

  IF IN THEN
    DATA := QUEUE.ARR[QUEUE.BOT];
    QUEUE.BOT := (QUEUE.BOT + 1) MOD 20;
    QUEUE.DIM := QUEUE.DIM - 1;
  END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK EN_USINT_STATE
  VAR_EXTERNAL
    STATE : USINT;
  END_VAR
  VAR_INPUT
    IN : BOOL;
    DATA : USINT;
  END_VAR

  IF IN THEN
      STATE := DATA;
  END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK ENCODER
  VAR_INPUT
    IN0 : BOOL;
    IN1 : BOOL;
    IN2 : BOOL;
    IN3 : BOOL;
  END_VAR
  VAR
    DATA0 : BOOL;
    DATA1 : BOOL;
  END_VAR
  VAR_OUTPUT
    OUT : BOOL;
    DATA : USINT;
  END_VAR
  VAR
    BOOL_TO_USINT22_OUT : USINT;
    BOOL_TO_USINT6_OUT : USINT;
    MUL25_OUT : USINT;
    ADD35_OUT : USINT;
  END_VAR

  IF IN0 THEN
    DATA1 := FALSE; (*reset*)
  END_IF;
  IF IN0 THEN
    DATA0 := FALSE; (*reset*)
  END_IF;
  IF IN1 THEN
    DATA1 := FALSE; (*reset*)
  END_IF;
  IF IN1 THEN
    DATA0 := TRUE; (*set*)
  END_IF;
  IF IN2 THEN
    DATA1 := TRUE; (*set*)
  END_IF;
  IF IN2 THEN
    DATA0 := FALSE; (*reset*)
  END_IF;
  IF IN3 THEN
    DATA1 := TRUE; (*set*)
  END_IF;
  IF IN3 THEN
    DATA0 := TRUE; (*set*)
  END_IF;
  BOOL_TO_USINT22_OUT := BOOL_TO_USINT(DATA0);
  BOOL_TO_USINT6_OUT := BOOL_TO_USINT(DATA1);
  MUL25_OUT := MUL(BOOL_TO_USINT6_OUT, 2);
  ADD35_OUT := ADD(BOOL_TO_USINT22_OUT, MUL25_OUT);
  DATA := ADD35_OUT;
  OUT := IN0 OR IN1 OR IN2 OR IN3;
END_FUNCTION_BLOCK

FUNCTION_BLOCK IN_USINT_QUEUE
  VAR_EXTERNAL
    QUEUE : USINT_QUEUE;
    STATE : USINT;
    DIR : BOOL;
  END_VAR
  VAR
    I : USINT;
    J : USINT;
    H : USINT;
  END_VAR
  VAR_INPUT
    IN : BOOL;
    DATA : USINT;
  END_VAR
  VAR_OUTPUT
    OUT : BOOL;
  END_VAR

  IF IN THEN
    IF DATA > STATE THEN
      I := QUEUE.BOT;
      FOR H := 0 TO QUEUE.DIM - 1 DO
        IF DATA < QUEUE.ARR[I] OR (QUEUE.ARR[I] < STATE AND DIR = 1) THEN
          EXIT;
        END_IF;
        I := (I + 1) MOD 20;
      END_FOR;
    ELSIF DATA < STATE THEN
      I := QUEUE.BOT;
      FOR H := 0 TO QUEUE.DIM - 1 DO
        IF DATA > QUEUE.ARR[I] OR (QUEUE.ARR[I] > STATE AND DIR = 0) THEN
          EXIT;
        END_IF;
        I := (I + 1) MOD 20;
      END_FOR;
    END_IF;
    
    FOR J := QUEUE.TOP TO I + 1 DO
      QUEUE.ARR[J] := QUEUE.ARR[J - 1];
    END_FOR;
      
    QUEUE.ARR[I] := DATA;
    QUEUE.TOP := (QUEUE.TOP + 1) MOD 20;
    QUEUE.DIM := QUEUE.DIM + 1;
  END_IF;
  OUT := QUEUE.DIM > 0;
END_FUNCTION_BLOCK

PROGRAM program0
  VAR_EXTERNAL
    QUEUE : USINT_QUEUE;
    STATE : USINT;
    DIR : BOOL;
  END_VAR
  VAR
    READY : BOOL;
  END_VAR
  VAR_INPUT
    SNS0 : BOOL;
    SNS1 : BOOL;
    SNS2 : BOOL;
    SNS3 : BOOL;
  END_VAR
  VAR
    IND0 : BOOL := 1;
    IND1 : BOOL;
    IND2 : BOOL;
    IND3 : BOOL;
  END_VAR
  VAR_INPUT
    REQ0 : BOOL;
    REQ1 : BOOL;
    REQ2 : BOOL;
    REQ3 : BOOL;
    REQ00 : BOOL;
    REQ11 : BOOL;
    REQ22 : BOOL;
    REQ33 : BOOL;
  END_VAR
  VAR_OUTPUT
    UP : BOOL;
    DOWN : BOOL;
    OPEN : BOOL;
  END_VAR
  VAR
    ENCODER0 : ENCODER;
    EN_USINT_STATE0 : EN_USINT_STATE;
    ENCODER1 : ENCODER;
    IN_USINT_QUEUE0 : IN_USINT_QUEUE;
    TON0 : TON;
    OUT_USINT_QUEUE0 : OUT_USINT_QUEUE;
    R_TRIG1 : R_TRIG;
    R_TRIG2 : R_TRIG;
    R_TRIG3 : R_TRIG;
    R_TRIG4 : R_TRIG;
    R_TRIG5 : R_TRIG;
    R_TRIG6 : R_TRIG;
    R_TRIG7 : R_TRIG;
    R_TRIG8 : R_TRIG;
    R_TRIG9 : R_TRIG;
    R_TRIG10 : R_TRIG;
    R_TRIG11 : R_TRIG;
    R_TRIG12 : R_TRIG;
    R_TRIG13 : R_TRIG;
    R_TRIG14 : R_TRIG;
    R_TRIG15 : R_TRIG;
    R_TRIG16 : R_TRIG;
    R_TRIG17 : R_TRIG;
    F_TRIG1 : F_TRIG;
    R_TRIG18 : R_TRIG;
    R_TRIG19 : R_TRIG;
    R_TRIG20 : R_TRIG;
    R_TRIG21 : R_TRIG;
    R_TRIG22 : R_TRIG;
    R_TRIG23 : R_TRIG;
    R_TRIG24 : R_TRIG;
    EQ103_OUT : BOOL;
    LT44_OUT : BOOL;
    GT50_OUT : BOOL;
    R_TRIG25 : R_TRIG;
    R_TRIG26 : R_TRIG;
    R_TRIG27 : R_TRIG;
    R_TRIG28 : R_TRIG;
  END_VAR

  R_TRIG1(CLK := SNS0);
  IF R_TRIG1.Q THEN
    IND0 := TRUE; (*set*)
  END_IF;
  R_TRIG2(CLK := SNS0);
  IF R_TRIG2.Q THEN
    IND1 := FALSE; (*reset*)
  END_IF;
  R_TRIG3(CLK := SNS0);
  IF R_TRIG3.Q THEN
    IND2 := FALSE; (*reset*)
  END_IF;
  R_TRIG4(CLK := SNS0);
  IF R_TRIG4.Q THEN
    IND3 := FALSE; (*reset*)
  END_IF;
  R_TRIG5(CLK := SNS1);
  IF R_TRIG5.Q THEN
    IND0 := FALSE; (*reset*)
  END_IF;
  R_TRIG6(CLK := SNS1);
  IF R_TRIG6.Q THEN
    IND1 := TRUE; (*set*)
  END_IF;
  R_TRIG7(CLK := SNS1);
  IF R_TRIG7.Q THEN
    IND2 := FALSE; (*reset*)
  END_IF;
  R_TRIG8(CLK := SNS1);
  IF R_TRIG8.Q THEN
    IND3 := FALSE; (*reset*)
  END_IF;
  R_TRIG9(CLK := SNS2);
  IF R_TRIG9.Q THEN
    IND0 := FALSE; (*reset*)
  END_IF;
  R_TRIG10(CLK := SNS2);
  IF R_TRIG10.Q THEN
    IND1 := FALSE; (*reset*)
  END_IF;
  R_TRIG11(CLK := SNS2);
  IF R_TRIG11.Q THEN
    IND2 := TRUE; (*set*)
  END_IF;
  R_TRIG12(CLK := SNS2);
  IF R_TRIG12.Q THEN
    IND3 := FALSE; (*reset*)
  END_IF;
  R_TRIG13(CLK := SNS3);
  IF R_TRIG13.Q THEN
    IND0 := FALSE; (*reset*)
  END_IF;
  R_TRIG14(CLK := SNS3);
  IF R_TRIG14.Q THEN
    IND1 := FALSE; (*reset*)
  END_IF;
  R_TRIG15(CLK := SNS3);
  IF R_TRIG15.Q THEN
    IND2 := FALSE; (*reset*)
  END_IF;
  R_TRIG16(CLK := SNS3);
  IF R_TRIG16.Q THEN
    IND3 := TRUE; (*set*)
  END_IF;
  R_TRIG17(CLK := REQ00);
  F_TRIG1(CLK := READY);
  R_TRIG18(CLK := REQ0);
  R_TRIG19(CLK := REQ11);
  R_TRIG20(CLK := REQ1);
  R_TRIG21(CLK := REQ22);
  R_TRIG22(CLK := REQ2);
  R_TRIG23(CLK := REQ33);
  R_TRIG24(CLK := REQ3);
  ENCODER1(IN0 := NOT(IND0) AND R_TRIG18.Q AND (IND0 OR IND1 OR IND2 OR IND3) OR (F_TRIG1.Q OR R_TRIG17.Q) AND NOT(IND0), IN1 := NOT(IND1) AND R_TRIG20.Q AND (IND0 OR IND1 OR IND2 OR IND3) OR R_TRIG19.Q AND NOT(IND1), IN2 := NOT(IND2) AND R_TRIG22.Q AND (IND0 OR IND0 OR IND1 OR IND2 OR IND3) OR R_TRIG21.Q AND NOT(IND2), IN3 := NOT(IND3) AND R_TRIG24.Q AND (IND0 OR IND1 OR IND2 OR IND3) OR R_TRIG23.Q AND NOT(IND3));
  IN_USINT_QUEUE0(IN := ENCODER1.OUT, DATA := ENCODER1.DATA);
  READY := IN_USINT_QUEUE0.OUT;
  EQ103_OUT := EQ(STATE, QUEUE.ARR[QUEUE.BOT]);
  IF READY AND EQ103_OUT THEN
    UP := FALSE; (*reset*)
  END_IF;
  IF READY AND EQ103_OUT THEN
    DOWN := FALSE; (*reset*)
  END_IF;
  IF READY AND EQ103_OUT THEN
    OPEN := TRUE; (*set*)
  END_IF;
  LT44_OUT := LT(STATE, QUEUE.ARR[QUEUE.BOT]);
  IF READY AND LT44_OUT THEN
    UP := TRUE; (*set*)
  END_IF;
  IF READY AND LT44_OUT THEN
    DIR := TRUE; (*set*)
  END_IF;
  IF READY AND LT44_OUT THEN
    OPEN := FALSE; (*reset*)
  END_IF;
  GT50_OUT := GT(STATE, QUEUE.ARR[QUEUE.BOT]);
  IF READY AND GT50_OUT THEN
    DIR := FALSE; (*reset*)
  END_IF;
  IF READY AND GT50_OUT THEN
    DOWN := TRUE; (*set*)
  END_IF;
  IF READY AND GT50_OUT THEN
    OPEN := FALSE; (*reset*)
  END_IF;
  R_TRIG25(CLK := SNS0);
  R_TRIG26(CLK := SNS1);
  R_TRIG27(CLK := SNS2);
  R_TRIG28(CLK := SNS3);
  ENCODER0(IN0 := R_TRIG25.Q, IN1 := R_TRIG26.Q, IN2 := R_TRIG27.Q, IN3 := R_TRIG28.Q);
  EN_USINT_STATE0(IN := ENCODER0.OUT, DATA := ENCODER0.DATA);
  TON0(IN := READY AND EQ103_OUT, PT := T#20s);
  OUT_USINT_QUEUE0(IN := TON0.Q);
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    VAR_GLOBAL
      QUEUE : USINT_QUEUE;
      STATE : USINT;
      DIR : BOOL;
    END_VAR
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : program0;
  END_RESOURCE
END_CONFIGURATION
